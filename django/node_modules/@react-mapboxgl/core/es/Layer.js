import _isPlainObject from 'lodash/isPlainObject';
import _isNil from 'lodash/isNil';
import _pick from 'lodash/pick';
import _omitBy from 'lodash/omitBy';
import _extend from 'lodash/extend';
import _each from 'lodash/each';
import _isEqual from 'lodash/isEqual';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp2;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';

import diff from './util/diff';
import Children from './Children';
import Source from './Source';
import LayerEvents from './LayerEvents';

var Layer = (_temp2 = _class = function (_React$Component) {
  _inherits(Layer, _React$Component);

  function Layer() {
    var _temp, _this, _ret;

    _classCallCheck(this, Layer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      added: false
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Layer.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return !_isEqual(this.props, nextProps) || !_isEqual(this.state, nextState);
  };

  Layer.prototype.componentDidMount = function componentDidMount() {
    this.addLayer(this.props);
  };

  Layer.prototype.componentWillUnmount = function componentWillUnmount() {
    this.removeLayer(this.props);
  };

  Layer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    var map = this.context.map;

    // Have to recreate layer if these change.

    if (!_isEqual(this.props.id, nextProps.id) || !_isEqual(this.props.type, nextProps.type) || !_isEqual(this.props.source, nextProps.source) || !_isEqual(this.props.sourceLayer, nextProps.sourceLayer) || !_isEqual(this.props.metadata, nextProps.metadata) || !_isEqual(this.props.copy, nextProps.copy)) {
      this.removeLayer(this.props);
      this.addLayer(nextProps);
      return;
    }

    if (!_isEqual(this.props.filter, nextProps.filter)) {
      map.setFilter(this.props.id, nextProps.filter);
    }

    _each(diff(this.props.layout || {}, nextProps.layout || {}), function (_ref) {
      var type = _ref.type,
          key = _ref.key,
          value = _ref.value;

      map.setLayoutProperty(_this2.props.id, key, type === 'remove' ? null : value);
    });

    _each(diff(this.props.paint || {}, nextProps.paint || {}), function (_ref2) {
      var type = _ref2.type,
          key = _ref2.key,
          value = _ref2.value;

      map.setPaintProperty(_this2.props.id, key, type === 'remove' ? null : value);
    });

    if (this.props.before !== nextProps.before) {
      map.moveLayer(this.props.id, nextProps.before);
    }

    if (this.props.minZoom !== nextProps.minZoom || this.props.maxZoom !== nextProps.maxZoom) {
      map.setLayerZoomRange(this.props.id, nextProps.minZoom, nextProps.maxZoom);
    }
  };

  Layer.prototype.addLayer = function addLayer(props) {
    var map = this.context.map;

    var options = {};

    // Grab basic options from props.
    _extend(options, _omitBy(_pick(props, ['id', 'type', 'metadata', 'minzoom', 'maxzoom', 'filter', 'layout', 'paint']), _isNil));

    // Grab 'ref' from 'copy'.
    if (props.copy) {
      options.ref = props.copy;
    }

    // Check if we have a source id or object.
    if (_isPlainObject(props.source)) {
      options.source = props.source.id || props.id + '-source';
    } else {
      options.source = props.source;
    }
    if (props.sourceLayer) {
      options['source-layer'] = props.sourceLayer;
    }

    // Add the layer to the map.
    map.addLayer(options, props.before);
    map.fire('_addLayer', props.id);
    this.setState({ added: true });
  };

  Layer.prototype.removeLayer = function removeLayer(props) {
    var map = this.context.map;

    map.removeLayer(props.id);
    map.fire('_removeLayer', props.id);
    this.setState({ added: false });
  };

  Layer.prototype.render = function render() {
    return React.createElement(
      Children,
      null,
      _isPlainObject(this.props.source) ? React.createElement(Source, _extends({
        id: this.props.id + '-source'
      }, this.props.source)) : null,
      this.state.added ? React.createElement(LayerEvents, _extends({
        layer: this.props.id
      }, LayerEvents.pickEvents(this.props))) : null
    );
  };

  return Layer;
}(React.Component), _class.propTypes = {
  id: PropTypes.string.isRequired,
  type: PropTypes.oneOf(['fill', 'line', 'symbol', 'circle', 'fill-extrusion', 'raster', 'background']).isRequired,
  source: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,
  sourceLayer: PropTypes.string,
  metadata: PropTypes.object,
  copy: PropTypes.string,
  minzoom: PropTypes.number,
  maxzoom: PropTypes.number,
  filter: PropTypes.array,
  layout: PropTypes.object,
  paint: PropTypes.object,
  before: PropTypes.string
  // LayerEvents
}, _class.contextTypes = {
  map: PropTypes.object
}, _temp2);


export default Layer;